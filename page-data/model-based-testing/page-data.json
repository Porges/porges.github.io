{"componentChunkName":"component---src-templates-blog-post-js","path":"/model-based-testing/","result":{"data":{"site":{"siteMetadata":{"title":"porg.es"}},"markdownRemark":{"id":"0455b0cb-a9df-500d-aa87-9a1798fbf958","excerpt":"This is a blog version of a talk that I did ~2015 in Auckland. Nothing in it is original or unknown, but there aren‚Äôt that many examples of doing this aside‚Ä¶","html":"<p><em>This is a blog version of a talk that I did ~2015 in Auckland. Nothing in it is original or unknown, but there aren‚Äôt that many examples of doing this aside from <a href=\"https://fscheck.github.io/FsCheck/StatefulTesting.html\">in the FsCheck documentation</a>. I also gave <a href=\"https://www.youtube.com/watch?v=8oALNLdyOyM\">a talk which contains a very similar example</a> to the Melbourne ALT.NET meetup in 2018.</em></p>\n<h3>What is FsCheck?</h3>\n<p>FsCheck is a library in the spirit of Haskell‚Äôs <a href=\"https://en.wikipedia.org/wiki/QuickCheck\">QuickCheck</a>, which allows you to perform property-based testing. The main feature that it provides is the ability to generate arbitrary instances of any supported data type, and the ability to define your own generators.</p>\n<p>We can leverage this ability to perform model-based testing in a simple manner.</p>\n<p>Let‚Äôs run through how we can use this to test a simple system. All the code in this post is going to be F#, but the system could equally well be described in C# and tested from F#. If you copy and paste the code into an F# file, it should work (you‚Äôll need to install the <code class=\"language-text\">FsCheck.Xunit</code> and <code class=\"language-text\">xunit</code> packages, and probably <code class=\"language-text\">xunit.runner.visualstudio</code> to run the tests).</p>\n<h3>The system to test</h3>\n<p>In our basic system, we store users. We can <code class=\"language-text\">Add</code>, <code class=\"language-text\">Get</code> (possibly failing), or <code class=\"language-text\">Delete</code> a user. This is described by the following interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token annotation\"><span class=\"token punctuation\">[&lt;</span><span class=\"token class-name\">Struct</span><span class=\"token punctuation\">>]</span></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UserId</span> <span class=\"token operator\">=</span> UserId <span class=\"token keyword\">of</span> <span class=\"token class-name\">string</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">:</span> <span class=\"token class-name\">UserId</span> <span class=\"token punctuation\">;</span> name <span class=\"token punctuation\">:</span> <span class=\"token class-name\">string</span> <span class=\"token punctuation\">;</span> age <span class=\"token punctuation\">:</span> <span class=\"token class-name\">int</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">IUserOperations</span> <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">member</span> AddUser <span class=\"token punctuation\">:</span> <span class=\"token class-name\">User <span class=\"token operator\">-></span> unit</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">member</span> GetUser <span class=\"token punctuation\">:</span> <span class=\"token class-name\">UserId <span class=\"token operator\">-></span> Option</span><span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">member</span> DeleteUser <span class=\"token punctuation\">:</span> <span class=\"token class-name\">UserId <span class=\"token operator\">-></span> unit</span></code></pre></div>\n<p>Next we have to implement this system.</p>\n<p>We‚Äôll use an in-memory dictionary, where we map <code class=\"language-text\">UserID</code>s to the actual <code class=\"language-text\">User</code> objects:</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">open</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UserSystem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> \n  <span class=\"token keyword\">let</span> users <span class=\"token operator\">=</span> Dictionary<span class=\"token operator\">&lt;</span>UserId<span class=\"token punctuation\">,</span> User<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Exposed for us to use later:</span>\n  <span class=\"token keyword\">member</span> this<span class=\"token punctuation\">.</span>UserCount <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span>Count\n\n  <span class=\"token comment\">// And implement the interface:</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUserOperations</span> <span class=\"token keyword\">with</span>\n    <span class=\"token keyword\">member</span> this<span class=\"token punctuation\">.</span>AddUser u <span class=\"token operator\">=</span>\n        users<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;-</span> u\n\n    <span class=\"token keyword\">member</span> this<span class=\"token punctuation\">.</span>GetUser id <span class=\"token operator\">=</span>\n      <span class=\"token keyword\">match</span> users<span class=\"token punctuation\">.</span>TryGetValue id <span class=\"token keyword\">with</span>\n      <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Some user\n      <span class=\"token operator\">|</span> _ <span class=\"token operator\">-></span> None\n\n    <span class=\"token keyword\">member</span> this<span class=\"token punctuation\">.</span>DeleteUser <span class=\"token punctuation\">(</span>UserId id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n      <span class=\"token keyword\">if</span> id<span class=\"token punctuation\">.</span>Contains <span class=\"token string\">\"*\"</span> <span class=\"token comment\">// Uh-oh: catastrophic bug!</span>\n      <span class=\"token keyword\">then</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">else</span> users<span class=\"token punctuation\">.</span>Remove <span class=\"token punctuation\">(</span>UserId id<span class=\"token punctuation\">)</span> <span class=\"token operator\">|></span> ignore</code></pre></div>\n<p><em>Unfortunately</em>, on line 20 we‚Äôve introduced a critical bug. If the user ID contains ‚Äú<code class=\"language-text\">*</code>‚Äù then we accidentally remove all the users in the system. Oops. ü§¶</p>\n<p>Later on we will see if our test will find this bug.</p>\n<h3>Modelling the system</h3>\n<p>In order to check our system, we must develop a model‚Äîa simplified version of the system that we can verify more easily. The model doesn‚Äôt need to replicate every piece of behaviour of the full system, it might only replicate one aspect that we care about.</p>\n<p>Here we will use a version of the system that only cares about <em>how many</em> users there are. In order to track this it only needs to store the set of valid IDs:</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token comment\">// this is our model</span>\n<span class=\"token comment\">// the only thing we care about is how many users there are</span>\n<span class=\"token comment\">// so we just store the names as a set</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UserCountModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n\n    <span class=\"token keyword\">let</span> users <span class=\"token operator\">=</span> HashSet<span class=\"token operator\">&lt;</span>UserId<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">member</span> this<span class=\"token punctuation\">.</span>Verify <span class=\"token punctuation\">(</span>real <span class=\"token punctuation\">:</span> <span class=\"token class-name\">UserSystem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n        Xunit<span class=\"token punctuation\">.</span>Assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">,</span> real<span class=\"token punctuation\">.</span>UserCount<span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUserOperations</span> <span class=\"token keyword\">with</span>\n        <span class=\"token keyword\">member</span> this<span class=\"token punctuation\">.</span>AddUser u <span class=\"token operator\">=</span> \n            users<span class=\"token punctuation\">.</span>Add u<span class=\"token punctuation\">.</span>id <span class=\"token operator\">|></span> ignore\n\n        <span class=\"token keyword\">member</span> this<span class=\"token punctuation\">.</span>DeleteUser name <span class=\"token operator\">=</span>\n            users<span class=\"token punctuation\">.</span>Remove name <span class=\"token operator\">|></span> ignore\n\n        <span class=\"token keyword\">member</span> this<span class=\"token punctuation\">.</span>GetUser name <span class=\"token operator\">=</span> None</code></pre></div>\n<p><code class=\"language-text\">Add</code> adds an ID to the set (unless it already exists), <code class=\"language-text\">Delete</code> removes an ID (if it exists), and <code class=\"language-text\">Get</code> does nothing.</p>\n<p>We also provide a <code class=\"language-text\">Verify</code> method that checks the model against the real system. (In real life, this could use HTTP calls or some other method.)</p>\n<h3>Applying operations</h3>\n<p>Now, in order to test our system, we need a way to describe the actions we can perform against it. We do this by <em>reifying</em> the operations we can perform as a data type:</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Operation</span> <span class=\"token operator\">=</span>\n    <span class=\"token operator\">|</span> Add <span class=\"token keyword\">of</span> <span class=\"token class-name\">User</span>\n    <span class=\"token operator\">|</span> Get <span class=\"token keyword\">of</span> <span class=\"token class-name\">UserId</span>\n    <span class=\"token operator\">|</span> Delete <span class=\"token keyword\">of</span> <span class=\"token class-name\">UserId</span></code></pre></div>\n<p>See that that this aligns exactly with the <code class=\"language-text\">IUserOperations</code> interface shown in the first block of code above. For each method on the interface, we have a corresponding case in the discriminated union, and the data needed to call the method is also contained in the case.</p>\n<p>Next, we need to be able to perform these actions against both the model and the real system. To do this we simply translate from each case to the corresponding method on the interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">let</span> applyOp <span class=\"token punctuation\">(</span>op <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Operation</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>handler <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IUserOperations</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">match</span> op <span class=\"token keyword\">with</span>\n    <span class=\"token operator\">|</span> Add user <span class=\"token operator\">-></span> handler<span class=\"token punctuation\">.</span>AddUser user\n    <span class=\"token operator\">|</span> Get name <span class=\"token operator\">-></span> handler<span class=\"token punctuation\">.</span>GetUser name <span class=\"token operator\">|></span> ignore\n    <span class=\"token operator\">|</span> Delete name <span class=\"token operator\">-></span> handler<span class=\"token punctuation\">.</span>DeleteUser name</code></pre></div>\n<h3>Testing the system</h3>\n<p>Now we get to the magic part! First up, we have a little boilerplate to tell FsCheck that we don‚Äôt want any <code class=\"language-text\">null</code> strings generated, as this would just complicate the example:</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">open</span> FsCheck\n<span class=\"token keyword\">open</span> FsCheck<span class=\"token punctuation\">.</span>Xunit\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Arbs</span> <span class=\"token operator\">=</span> \n    <span class=\"token comment\">// declare we only want non-null strings</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">member</span> <span class=\"token function\">strings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n        Arb<span class=\"token punctuation\">.</span>filter <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> s <span class=\"token operator\">-></span> s <span class=\"token operator\">&lt;></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;|</span> Arb<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token annotation\"><span class=\"token punctuation\">[&lt;</span><span class=\"token class-name\">Properties</span><span class=\"token annotation-content\"><span class=\"token punctuation\">(</span>Arbitrary<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token operator\">|</span>typeof<span class=\"token operator\">&lt;</span>Arbs<span class=\"token operator\">></span><span class=\"token operator\">|</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">>]</span></span>\n<span class=\"token keyword\">module</span> Tests <span class=\"token operator\">=</span>\n  <span class=\"token comment\">// ... next snippet</span></code></pre></div>\n<p>And now our test. We take in a list of operations (which FsCheck will automatically generate for us), we apply all the operations to both models, and then we verify the system against the model:</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\">    <span class=\"token annotation\"><span class=\"token punctuation\">[&lt;</span><span class=\"token class-name\">Property</span><span class=\"token punctuation\">>]</span></span>\n    <span class=\"token keyword\">let</span> ``Check implementation against model`` operations <span class=\"token operator\">=</span>\n\n        <span class=\"token comment\">// create both implementations empty</span>\n        <span class=\"token keyword\">let</span> real <span class=\"token operator\">=</span> <span class=\"token function\">UserSystem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> model <span class=\"token operator\">=</span> <span class=\"token function\">UserCountModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// apply all the operations</span>\n        <span class=\"token keyword\">let</span> applyToBothModels op <span class=\"token operator\">=</span>\n            applyOp op real\n            applyOp op model\n\n        List<span class=\"token punctuation\">.</span>iter applyToBothModels operations\n\n        <span class=\"token comment\">// verify the result</span>\n        model<span class=\"token punctuation\">.</span>Verify real</code></pre></div>\n<p>This may seem like less code than expected! FsCheck can automatically build us a list of <code class=\"language-text\">Operation</code>s because it knows how to make <code class=\"language-text\">Operation</code> (since it knows how to make each case in turn,starting from <code class=\"language-text\">string</code>s and building up). Recursion is great!</p>\n<h3>Running the test and ‚Äúshrinking‚Äù</h3>\n<p>If you try to run the test, you should receive a result along these lines (the exact details will differ):</p>\n<p><img src=\"/content/images/2017/02/shrunk.PNG\"></p>\n<p>Our test failed (that‚Äôs a good thing!) See the second-to-last <code class=\"language-text\">Delete</code> operation in the input? It is deleting <code class=\"language-text\">UserId &quot;^*VJc6&#39;/I^x&quot;</code>, which triggers the bug we have in our system for user IDs containing ‚Äú<code class=\"language-text\">*</code>‚Äù.</p>\n<p>The input it‚Äôs showing us is quite gnarly as FsCheck has generated user IDs containing newlines and other nasty characters, but the highlighted part at the bottom is what FsCheck was able to shrink the failing input to.</p>\n<p>It can do this because, as well as knowing how to <em>generate</em> random data, FsCheck knows how to <em>shrink</em> random data. It was able to repeatedly shrink the input until it found this minimal case, containing only two operations:</p>\n<ol>\n<li>Add a user (note that it doesn‚Äôt seem to matter what the details are, as all the attributes shrank away to nothing‚Äìif the details mattered, then it wouldn‚Äôt have shrunk this much)</li>\n<li>Delete the user with ID ‚Äú<code class=\"language-text\">*</code>‚Äù</li>\n</ol>\n<p>And indeed, this sequence exactly replicates our bug! üéâ </p>\n<p>The combination of randomly generating inputs and then being able to shrink them when failures are found is <em>very</em> powerful.</p>\n<h3>The recipe</h3>\n<p>A simple list for success:</p>\n<ol>\n<li>model your system-under-test as an interface</li>\n<li>create a model of your system (or multiple models, each testing one aspect) that also implements the interface</li>\n<li>create a type that reifies each operation as a member of a discriminated union</li>\n<li>create a test that applies a list of operations to the model and system and validates the system</li>\n<li>üíÖ relax and let your computer do the work</li>\n</ol>","frontmatter":{"title":"(Poor man‚Äôs) model-based testing with F# & FsCheck","date":"February 01, 2017","description":null}}},"pageContext":{"slug":"/model-based-testing/","previous":{"fields":{"slug":"/managing-multiplicity/"},"frontmatter":{"title":"Managing Multiplicity"}},"next":null}},"staticQueryHashes":["240262808","2841359383"]}