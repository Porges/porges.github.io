<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[porg.es]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>https://porg.es</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 10 Aug 2020 04:28:37 GMT</lastBuildDate><item><title><![CDATA[A Type For Every Concept]]></title><description><![CDATA[⚠ many opinions I’ve joked in the past with colleagues about wanting a language where primitive types can only be used as representations…]]></description><link>https://porg.es/a-type-for-every-concept/</link><guid isPermaLink="false">https://porg.es/a-type-for-every-concept/</guid><content:encoded>&lt;p&gt;[⚠ &lt;em&gt;many opinions&lt;/em&gt;]&lt;/p&gt;
&lt;p&gt;I’ve joked in the past with colleagues about wanting a language where primitive types can only be used as representations. At least, they thought I was joking. This is the end-game of avoiding ‘&lt;a href=&quot;http://wiki.c2.com/?PrimitiveObsession&quot;&gt;primitive obsession&lt;/a&gt;’.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Primitive types are mere representations!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For every concept your code cares about, there should be a type. I’m not just thinking about &lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;Person&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;Student&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;Cat&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;Vehicle&lt;/code&gt;, I mean the “little types” as well – you shouldn’t be using primitive types to represent anything that’s within the specific domain of your code.&lt;/p&gt;
&lt;p&gt;A username is probably not “just a string”, just like XML is not just a string, an email is not just a string, and a phone number is not just a string. (Also, an index is not a count, and vice versa. More on this in another post.)&lt;/p&gt;
&lt;p&gt;So… give them their own types!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip: it’s probably cheap!&lt;/strong&gt; Typed languages often have zero-cost (or near-zero-cost) abstraction into new types. This includes C#/F# (structs), Haskell (newtypes), C++ (all classes).&lt;/p&gt;
&lt;p&gt;Here are some more reasons. The examples are going to be in C# as it’s my mother tongue, but they are mostly applicable everywhere.&lt;/p&gt;
&lt;h4&gt;Avoid nonsense values&lt;/h4&gt;
&lt;p&gt;This is also known as “make illegal states unrepresentable”.&lt;/p&gt;
&lt;p&gt;In most cases, something that is represented by a primitive type won’t have all of the possible values of that type be valid values. For example, a person’s age or height represented by an &lt;code class=&quot;language-text&quot;&gt;int&lt;/code&gt; can’t be a negative number.&lt;/p&gt;
&lt;h4&gt;Avoid meaningless operations&lt;/h4&gt;
&lt;p&gt;In addition, not all &lt;em&gt;operations&lt;/em&gt; will be valid. Does it make sense to multiply two ages? Does it make sense to multiply an age and a height? Wrapping the &lt;code class=&quot;language-text&quot;&gt;int&lt;/code&gt; in a new type allows us to prevent invalid values from being used, and prevents us from using nonsensical operations.&lt;/p&gt;
&lt;h4&gt;Enforcing invariants/structure&lt;/h4&gt;
&lt;p&gt;Avoid placing validation code in multiple locations, and validate in the constructor/parse method of the type. Also, prefer normalization to simple validation.&lt;/p&gt;
&lt;p&gt;Create types with a proper constructors (or &lt;code class=&quot;language-text&quot;&gt;TryParse&lt;/code&gt; method) and use them. If it’s something like a credit card or phone number that will keep a string representation internally, then &lt;em&gt;normalize&lt;/em&gt; the format of the string so that all equivalent inputs have the same representation.&lt;/p&gt;
&lt;p&gt;If you validate these structured strings against a regular expression and then continue to pass a raw string around you’re throwing away valuable information.&lt;/p&gt;
&lt;p&gt;Furthermore, in a large or ageing codebase you’ll likely end up repeating the same validation in multiple places (and sometimes with incorrect or differing methods). Declaring a type gives you a point at which to localize validation.&lt;/p&gt;
&lt;p&gt;Even internally (not at the edges of the system), prefer types to preconditions. Having used &lt;a href=&quot;https://github.com/Microsoft/CodeContracts&quot;&gt;Code Contracts&lt;/a&gt; in the past, it is much more effective to lift preconditions to types—attempting to flow preconditions through multiple layers of code is tedious. Having a type also means that if your preconditions change you only have a single location to update.&lt;/p&gt;
&lt;h4&gt;Specifying consistent behaviour&lt;/h4&gt;
&lt;p&gt;If some identifier should be case-insensitive, you can enforce this with its own type:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Identifier&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IEquatable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Identifier&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StringComparer&lt;/span&gt; Comparer
        &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; StringComparer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OrdinalIgnoreCase&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Identifier&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; Value &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetHashCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Comparer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetHashCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Identifier&lt;/span&gt; other&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Comparer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; other&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt;&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; other &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; obj &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Identifier&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; other&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;HasValue &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;other&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Identifier&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Identifier&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Identifier&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Identifier&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, this is a little verbose in C#. However, you don’t need to think about it that much as it’s all boilerplate.&lt;/p&gt;
&lt;p&gt;In fact, if you ever see a &lt;code class=&quot;language-text&quot;&gt;Dictionary&amp;lt;string, T&amp;gt;&lt;/code&gt; being created with &lt;code class=&quot;language-text&quot;&gt;StringComparison.CaseInsensitive&lt;/code&gt;, it’s a good sign that the &lt;code class=&quot;language-text&quot;&gt;string&lt;/code&gt; should be changed into a distinct type. This ensures that the treatment of the value is the same everywhere that it’s used.&lt;/p&gt;
&lt;p&gt;Not only should you use types to enforce particular behaviour, you can use them to &lt;em&gt;remove&lt;/em&gt; behaviour. If a password should never be printed, you can override &lt;code class=&quot;language-text&quot;&gt;ToString&lt;/code&gt; to print &lt;code class=&quot;language-text&quot;&gt;&amp;quot;⛔&amp;quot;&lt;/code&gt;. If you calculate a floating-point value that shouldn’t be compared for equality, throw &lt;code class=&quot;language-text&quot;&gt;NotSupportedException&lt;/code&gt; in &lt;code class=&quot;language-text&quot;&gt;Equals&lt;/code&gt; (unfortunately you can’t remove equality completely in C#).&lt;/p&gt;
&lt;h4&gt;Easing changes of representation&lt;/h4&gt;
&lt;p&gt;I recently worked on a project where I introduced a type &lt;code class=&quot;language-text&quot;&gt;Message&lt;/code&gt; as a wrapper around a &lt;code class=&quot;language-text&quot;&gt;string&lt;/code&gt;. I thought this might have been going too far, but I did it anyway. &lt;small&gt;&lt;span style=&quot;color: lightgrey&quot;&gt;yolo&lt;/span&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Later on, I decided that the message never needed to be deserialized from bytes to a string in the first place, as the code never attempted an interpretation of the raw byte values. I changed the internal representation of &lt;code class=&quot;language-text&quot;&gt;Message&lt;/code&gt; to be a &lt;code class=&quot;language-text&quot;&gt;byte[]&lt;/code&gt; array. This change required only &lt;em&gt;2 lines&lt;/em&gt; to be modified across the codebase, despite &lt;code class=&quot;language-text&quot;&gt;Message&lt;/code&gt; being stored and mentioned in many places. If I had simply used &lt;code class=&quot;language-text&quot;&gt;string&lt;/code&gt; this would have been much more disruptive.&lt;/p&gt;
&lt;h4&gt;Type safety&lt;/h4&gt;
&lt;p&gt;This is low down the list because it’s nearly trivial. Everyone should want to avoid swapping samely-typed arguments (e.g. &lt;code class=&quot;language-text&quot;&gt;Login(string user, string password)&lt;/code&gt;). Having a type per concept prevents this. The same method with a type per concept (&lt;code class=&quot;language-text&quot;&gt;Login(UserName user, Password password)&lt;/code&gt;) is unconfusable.&lt;/p&gt;
&lt;p&gt;This is something people bump into often with .NET’s &lt;code class=&quot;language-text&quot;&gt;ArgumentNullException(string parameterName, string message)&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;ArgumentException(string message, string parameterName)&lt;/code&gt;. If &lt;code class=&quot;language-text&quot;&gt;nameof&lt;/code&gt; returned a type &lt;code class=&quot;language-text&quot;&gt;Identifier&lt;/code&gt; this would be easily preventable.&lt;/p&gt;
&lt;h4&gt;Preventing naming coincidences&lt;/h4&gt;
&lt;p&gt;This &lt;code class=&quot;language-text&quot;&gt;string gobble&lt;/code&gt; argument is not the same kind of &lt;em&gt;gobble&lt;/em&gt; as the &lt;code class=&quot;language-text&quot;&gt;string gobble&lt;/code&gt; argument on that other type in a distant part of the codebase. Distinct types prevent programmer confusion.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What not to do]]></title><description><![CDATA[Sometimes I feel like the only things I know about software are negative cases. Here are some of them. Building, continuous integration, etc…]]></description><link>https://porg.es/what-not-to-do/</link><guid isPermaLink="false">https://porg.es/what-not-to-do/</guid><content:encoded>&lt;p&gt;Sometimes I feel like the only things I know about software are &lt;em&gt;negative cases&lt;/em&gt;. Here are some of them.&lt;/p&gt;
&lt;h2&gt;Building, continuous integration, etc&lt;/h2&gt;
&lt;h3&gt;Don’t configure your build in your CI server&lt;/h3&gt;
&lt;p&gt;Products like TeamCity and VSTS have wonderful UIs for creating and editing build pipelines. You should not use them.&lt;/p&gt;
&lt;h4&gt;Instead: build scripts should be checked-in artifacts&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;They follow the code. Changing the build on a branch doesn’t affect other branches, and will follow the code when it’s merged.&lt;/li&gt;
&lt;li&gt;Changing the build doesn’t break the ability to check out old code and build it. This makes tools like &lt;code class=&quot;language-text&quot;&gt;git bisect&lt;/code&gt; much more useful.&lt;/li&gt;
&lt;li&gt;You don’t need to back up your CI server builds.&lt;/li&gt;
&lt;li&gt;The build is portable across any CI target (internal, public Travis/Appveyor, etc).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Code-level&lt;/h2&gt;
&lt;h3&gt;Don’t start hidden parallel background operations&lt;/h3&gt;
&lt;p&gt;This leads to hard-to-test code and an invasion of &lt;code class=&quot;language-text&quot;&gt;Thread.Sleep&lt;/code&gt;s.&lt;/p&gt;
&lt;h4&gt;Instead: always give the caller some way to wait upon completion&lt;/h4&gt;
&lt;p&gt;Even if you don’t use it in your production code (and let it run off in the background), return a &lt;code class=&quot;language-text&quot;&gt;Task&lt;/code&gt; so that test code can avoid running into timing issues.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[(Poor man’s) model-based testing with F# & FsCheck]]></title><description><![CDATA[This is a blog version of a talk that I did ~2015 in Auckland. Nothing in it is original or unknown, but there aren’t that many examples of…]]></description><link>https://porg.es/model-based-testing/</link><guid isPermaLink="false">https://porg.es/model-based-testing/</guid><pubDate>Wed, 01 Feb 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;This is a blog version of a talk that I did ~2015 in Auckland. Nothing in it is original or unknown, but there aren’t that many examples of doing this aside from &lt;a href=&quot;https://fscheck.github.io/FsCheck/StatefulTesting.html&quot;&gt;in the FsCheck documentation&lt;/a&gt;. I also gave &lt;a href=&quot;https://www.youtube.com/watch?v=8oALNLdyOyM&quot;&gt;a talk which contains a very similar example&lt;/a&gt; to the Melbourne ALT.NET meetup in 2018.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;What is FsCheck?&lt;/h3&gt;
&lt;p&gt;FsCheck is a library in the spirit of Haskell’s &lt;a href=&quot;https://en.wikipedia.org/wiki/QuickCheck&quot;&gt;QuickCheck&lt;/a&gt;, which allows you to perform property-based testing. The main feature that it provides is the ability to generate arbitrary instances of any supported data type, and the ability to define your own generators.&lt;/p&gt;
&lt;p&gt;We can leverage this ability to perform model-based testing in a simple manner.&lt;/p&gt;
&lt;p&gt;Let’s run through how we can use this to test a simple system. All the code in this post is going to be F#, but the system could equally well be described in C# and tested from F#. If you copy and paste the code into an F# file, it should work (you’ll need to install the &lt;code class=&quot;language-text&quot;&gt;FsCheck.Xunit&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;xunit&lt;/code&gt; packages, and probably &lt;code class=&quot;language-text&quot;&gt;xunit.runner.visualstudio&lt;/code&gt; to run the tests).&lt;/p&gt;
&lt;h3&gt;The system to test&lt;/h3&gt;
&lt;p&gt;In our basic system, we store users. We can &lt;code class=&quot;language-text&quot;&gt;Add&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Get&lt;/code&gt; (possibly failing), or &lt;code class=&quot;language-text&quot;&gt;Delete&lt;/code&gt; a user. This is described by the following interface:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;fsharp&quot;&gt;&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token annotation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserId&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; UserId &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;string&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserId&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; name &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; age &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IUserOperations&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; AddUser &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; unit&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; GetUser &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserId &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; Option&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;User&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; DeleteUser &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserId &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; unit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we have to implement this system.&lt;/p&gt;
&lt;p&gt;We’ll use an in-memory dictionary, where we map &lt;code class=&quot;language-text&quot;&gt;UserID&lt;/code&gt;s to the actual &lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt; objects:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;fsharp&quot;&gt;&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt; System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Collections&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Generic

&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserSystem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Dictionary&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;UserId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; User&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Exposed for us to use later:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UserCount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Count

  &lt;span class=&quot;token comment&quot;&gt;// And implement the interface:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IUserOperations&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AddUser u &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
        users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;u&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; u

    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GetUser id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TryGetValue id &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; Some user
      &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; _ &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; None

    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DeleteUser &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;UserId id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Contains &lt;span class=&quot;token string&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Uh-oh: catastrophic bug!&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Remove &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;UserId id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Unfortunately&lt;/em&gt;, on line 20 we’ve introduced a critical bug. If the user ID contains “&lt;code class=&quot;language-text&quot;&gt;*&lt;/code&gt;” then we accidentally remove all the users in the system. Oops. 🤦&lt;/p&gt;
&lt;p&gt;Later on we will see if our test will find this bug.&lt;/p&gt;
&lt;h3&gt;Modelling the system&lt;/h3&gt;
&lt;p&gt;In order to check our system, we must develop a model—a simplified version of the system that we can verify more easily. The model doesn’t need to replicate every piece of behaviour of the full system, it might only replicate one aspect that we care about.&lt;/p&gt;
&lt;p&gt;Here we will use a version of the system that only cares about &lt;em&gt;how many&lt;/em&gt; users there are. In order to track this it only needs to store the set of valid IDs:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;fsharp&quot;&gt;&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// this is our model&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// the only thing we care about is how many users there are&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// so we just store the names as a set&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserCountModel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; HashSet&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;UserId&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Verify &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;real &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserSystem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
        Xunit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; real&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UserCount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        
    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IUserOperations&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AddUser u &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
            users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Add u&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore

        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DeleteUser name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
            users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Remove name &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore

        &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GetUser name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; None&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Add&lt;/code&gt; adds an ID to the set (unless it already exists), &lt;code class=&quot;language-text&quot;&gt;Delete&lt;/code&gt; removes an ID (if it exists), and &lt;code class=&quot;language-text&quot;&gt;Get&lt;/code&gt; does nothing.&lt;/p&gt;
&lt;p&gt;We also provide a &lt;code class=&quot;language-text&quot;&gt;Verify&lt;/code&gt; method that checks the model against the real system. (In real life, this could use HTTP calls or some other method.)&lt;/p&gt;
&lt;h3&gt;Applying operations&lt;/h3&gt;
&lt;p&gt;Now, in order to test our system, we need a way to describe the actions we can perform against it. We do this by &lt;em&gt;reifying&lt;/em&gt; the operations we can perform as a data type:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;fsharp&quot;&gt;&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Operation&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; Add &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; Get &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserId&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; Delete &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserId&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See that that this aligns exactly with the &lt;code class=&quot;language-text&quot;&gt;IUserOperations&lt;/code&gt; interface shown in the first block of code above. For each method on the interface, we have a corresponding case in the discriminated union, and the data needed to call the method is also contained in the case.&lt;/p&gt;
&lt;p&gt;Next, we need to be able to perform these actions against both the model and the real system. To do this we simply translate from each case to the corresponding method on the interface:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;fsharp&quot;&gt;&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; applyOp &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;op &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handler &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IUserOperations&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt; op &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; Add user &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AddUser user
    &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; Get name &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GetUser name &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; ignore
    &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; Delete name &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DeleteUser name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Testing the system&lt;/h3&gt;
&lt;p&gt;Now we get to the magic part! First up, we have a little boilerplate to tell FsCheck that we don’t want any &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt; strings generated, as this would just complicate the example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;fsharp&quot;&gt;&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt; FsCheck
&lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt; FsCheck&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Xunit

&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Arbs&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;token comment&quot;&gt;// declare we only want non-null strings&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
        Arb&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;filter &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;|&lt;/span&gt; Arb&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Default&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token annotation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;token annotation-content&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Arbitrary&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;typeof&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Arbs&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt; Tests &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ... next snippet&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now our test. We take in a list of operations (which FsCheck will automatically generate for us), we apply all the operations to both models, and then we verify the system against the model:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;fsharp&quot;&gt;&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;    &lt;span class=&quot;token annotation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Property&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;]&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; ``Check implementation against model`` operations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// create both implementations empty&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; real &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;UserSystem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; model &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;UserCountModel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// apply all the operations&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; applyToBothModels op &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
            applyOp op real
            applyOp op model

        List&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;iter applyToBothModels operations

        &lt;span class=&quot;token comment&quot;&gt;// verify the result&lt;/span&gt;
        model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Verify real&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This may seem like less code than expected! FsCheck can automatically build us a list of &lt;code class=&quot;language-text&quot;&gt;Operation&lt;/code&gt;s because it knows how to make &lt;code class=&quot;language-text&quot;&gt;Operation&lt;/code&gt; (since it knows how to make each case in turn,starting from &lt;code class=&quot;language-text&quot;&gt;string&lt;/code&gt;s and building up). Recursion is great!&lt;/p&gt;
&lt;h3&gt;Running the test and “shrinking”&lt;/h3&gt;
&lt;p&gt;If you try to run the test, you should receive a result along these lines (the exact details will differ):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/images/2017/02/shrunk.PNG&quot;&gt;&lt;/p&gt;
&lt;p&gt;Our test failed (that’s a good thing!) See the second-to-last &lt;code class=&quot;language-text&quot;&gt;Delete&lt;/code&gt; operation in the input? It is deleting &lt;code class=&quot;language-text&quot;&gt;UserId &amp;quot;^*VJc6&amp;#39;/I^x&amp;quot;&lt;/code&gt;, which triggers the bug we have in our system for user IDs containing “&lt;code class=&quot;language-text&quot;&gt;*&lt;/code&gt;”.&lt;/p&gt;
&lt;p&gt;The input it’s showing us is quite gnarly as FsCheck has generated user IDs containing newlines and other nasty characters, but the highlighted part at the bottom is what FsCheck was able to shrink the failing input to.&lt;/p&gt;
&lt;p&gt;It can do this because, as well as knowing how to &lt;em&gt;generate&lt;/em&gt; random data, FsCheck knows how to &lt;em&gt;shrink&lt;/em&gt; random data. It was able to repeatedly shrink the input until it found this minimal case, containing only two operations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a user (note that it doesn’t seem to matter what the details are, as all the attributes shrank away to nothing–if the details mattered, then it wouldn’t have shrunk this much)&lt;/li&gt;
&lt;li&gt;Delete the user with ID “&lt;code class=&quot;language-text&quot;&gt;*&lt;/code&gt;”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And indeed, this sequence exactly replicates our bug! 🎉 &lt;/p&gt;
&lt;p&gt;The combination of randomly generating inputs and then being able to shrink them when failures are found is &lt;em&gt;very&lt;/em&gt; powerful.&lt;/p&gt;
&lt;h3&gt;The recipe&lt;/h3&gt;
&lt;p&gt;A simple list for success:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;model your system-under-test as an interface&lt;/li&gt;
&lt;li&gt;create a model of your system (or multiple models, each testing one aspect) that also implements the interface&lt;/li&gt;
&lt;li&gt;create a type that reifies each operation as a member of a discriminated union&lt;/li&gt;
&lt;li&gt;create a test that applies a list of operations to the model and system and validates the system&lt;/li&gt;
&lt;li&gt;💅 relax and let your computer do the work&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Managing Multiplicity]]></title><description><![CDATA[Alternate titles: Purging Pluralities, Collapsing Cardinality. Dealing with zero-or-more implementations is a common occurrence when dealing…]]></description><link>https://porg.es/managing-multiplicity/</link><guid isPermaLink="false">https://porg.es/managing-multiplicity/</guid><pubDate>Mon, 03 Jan 2000 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;Alternate titles: Purging Pluralities, Collapsing Cardinality.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Dealing with zero-or-more implementations is a common occurrence when dealing with code that uses behaviour injection (&lt;span style=&quot;font-variant:small-caps; text-transform:lowercase&quot;&gt;AKA&lt;/span&gt; the strategy pattern) heavily.&lt;/p&gt;
&lt;p&gt;In this post I’ll demonstrate how to deal with multiplicity for &lt;em&gt;specific types&lt;/em&gt; of strategies, in order to remove complexity from the consumer and allow more reuse and flexibility. &lt;/p&gt;
&lt;p&gt;Essentially, we’ll discover how to &lt;em&gt;mechanize&lt;/em&gt; the production of &lt;a href=&quot;http://c2.com/cgi/wiki?CompositePattern&quot;&gt;composites&lt;/a&gt;, for types that have some form of &lt;em&gt;monoidal&lt;/em&gt; result (which I’ll define at the end).&lt;/p&gt;
&lt;h2&gt;The scenario&lt;/h2&gt;
&lt;p&gt;If we have a class that has some behaviour that is injected, it often makes sense to generalize to allow multiple instances of that behaviour to be injected. We might end up with code that looks something like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IStrategy&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token return-type class-name&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DoTheThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Input&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Consumer&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ICollection&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IStrategy&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; _strategies&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PerformDuties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; strategy &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; _strategies&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; strategy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;DoTheThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/*...*/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// do something with result&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works fine. But there are a few reasons we should avoid this construct.&lt;/p&gt;
&lt;p&gt;The simplest is that we’ll probably end up duplicating this code if we need to use the &lt;code class=&quot;language-text&quot;&gt;IStrategy&lt;/code&gt; in several places – once one consumer accepts more than one instance, other consumers are likely to need to as well.&lt;/p&gt;
&lt;p&gt;A deeper problem is that the interpretation of multiple instances—that is, &lt;em&gt;how the instances are combined&lt;/em&gt;—is determined by the &lt;em&gt;consumer&lt;/em&gt; class and not by the &lt;em&gt;strategy&lt;/em&gt;. It would be more coherent for the &lt;code class=&quot;language-text&quot;&gt;IStrategy&lt;/code&gt; interface to decide how to combine multiple instances.&lt;/p&gt;
&lt;p&gt;It turns out that there’s a simple way to extract this complexity, and allow the strategies to decide how to combine themselves … for certain types of strategy. Thankfully these ‘certain strategies’ are some of the most common ones. In this post I’ll show how this works for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;strategies that decide &lt;em&gt;whether or not&lt;/em&gt; to perform some other action (“predicates” or “policies”)&lt;/li&gt;
&lt;li&gt;strategies that are used just for their behaviour and not their result (“actions” or “handlers”, fire-and-forget strategies)&lt;/li&gt;
&lt;li&gt;strategies where you want to collect the results into a list (“samplers”?)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s examine how to deal with each of these, and then we’ll see how to generalize this to other types of strategies.&lt;/p&gt;
&lt;h3&gt;Combining policies/predicates&lt;/h3&gt;
&lt;p&gt;A &lt;em&gt;policy&lt;/em&gt; decides whether or not to perform an action. Usually when dealing with multiple policies you only want to perform the action if &lt;em&gt;all&lt;/em&gt; of them permit it.&lt;/p&gt;
&lt;p&gt;In code, this will look something like this. We have an &lt;code class=&quot;language-text&quot;&gt;IPolicy&lt;/code&gt; interface and a consumer class:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IPolicy&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ShouldPerformAction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UsesPolicy&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ICollection&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IPolicy&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; _policies&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PerformDuties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; policy &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; _policies&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;policy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldPerformAction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// we got here, so perform the action&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If any of the policies return &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;, we’ll bail out of the method, but otherwise we will perform the action.&lt;/p&gt;
&lt;p&gt;In order to reduce the complexity of the consumer class, we can create a new implementation of the &lt;code class=&quot;language-text&quot;&gt;IPolicy&lt;/code&gt; interface, which &lt;em&gt;knows how to combine other policies&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CombinedPolicy&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IPolicy&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;NotNull&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IReadOnlyCollection&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IPolicy&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; _policies&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CombinedPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IEnumerable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IPolicy&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; policies&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        _policies &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; policies&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ShouldPerformAction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; _policies&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;All&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldPerformAction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that &lt;code class=&quot;language-text&quot;&gt;ShouldPerformAction&lt;/code&gt; is (functionally) equivalent to what the consumer class was doing before.&lt;/p&gt;
&lt;p&gt;Given this class, we have a &lt;em&gt;generic way to combine any number of policies into a single policy&lt;/em&gt;. Note also that &lt;code class=&quot;language-text&quot;&gt;CombinedPolicy&lt;/code&gt; correctly deals with the case where we have &lt;em&gt;no&lt;/em&gt; policies (it will return &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;)—this will be important later.&lt;/p&gt;
&lt;p&gt;The end result is that our consumer class will only ever need to deal with &lt;em&gt;one&lt;/em&gt; policy at a time!&lt;/p&gt;
&lt;p&gt;So, let’s simplify it:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UsesPolicyRevised&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IPolicy&lt;/span&gt; _policy&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PerformDuties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_policy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldPerformAction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// perform the action&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Great! Now we only have to deal with one &lt;code class=&quot;language-text&quot;&gt;IPolicy&lt;/code&gt; at a time. The added bonus is that if we have any other classes that use &lt;code class=&quot;language-text&quot;&gt;IPolicy&lt;/code&gt;, they will now &lt;em&gt;automatically&lt;/em&gt; be able to deal with &lt;em&gt;any&lt;/em&gt; number of policies, and they way they deal with multiple policies will be consistent. 👍&lt;/p&gt;
&lt;h3&gt;Combining fire-and-forget strategies&lt;/h3&gt;
&lt;p&gt;This situation might arise if you want to send a message to several different destinations. Maybe you want to log a message, but also send it to an alerting system.&lt;/p&gt;
&lt;p&gt;Let’s start with a similar setup to the previous one. We have an &lt;code class=&quot;language-text&quot;&gt;IDoStuff&lt;/code&gt; action interface and a consumer:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IDoStuff&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DoStuff&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InvokesActions&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ICollection&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IDoStuff&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; _actions&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PerformDuties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; action &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; _actions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;DoStuff&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we have a fan-out situation where multiple actions are called on the same value.&lt;/p&gt;
&lt;p&gt;If you’ve been following closely, you’ll know what we have to do next: create a class that does this for us. The important thing is that it is also an instance of &lt;code class=&quot;language-text&quot;&gt;IDoStuff&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CombinedAction&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IDoStuff&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;NotNull&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IReadOnlyCollection&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IDoStuff&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; _actions&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CombinedAction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IEnumerable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IDoStuff&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; actions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        _actions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; actions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DoStuff&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; action &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; _actions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;DoStuff&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now our original class becomes simply:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InvokesActionsRevised&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IDoStuff&lt;/span&gt; _action&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PerformDuties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        _action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;DoStuff&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That was pretty easy!&lt;/p&gt;
&lt;p&gt;Something else important has happened here: not only can we give the consumer class multiple actions, but we can customize &lt;em&gt;how multiple actions are performed&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;Let’s change the interfaces a bit to make it more interesting. Imagine instead that the &lt;code class=&quot;language-text&quot;&gt;IDoStuff&lt;/code&gt; interface was asynchronous:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IDoStuffAsync&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DoStuff&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CancellationToken&lt;/span&gt; ct&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now there are two plausible implementations of &lt;code class=&quot;language-text&quot;&gt;CombinedAction&lt;/code&gt;. One will run the actions in sequence, like before (I won’t show this here), but another possibility is that we want to fire off all the actions at once, in parallel:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InParallelActions&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IDoStuffAsync&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;NotNull&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IReadOnlyCollection&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IDoStuffAsync&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; _actions&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;InParallelActions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IEnumerable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IDoStuffAsync&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; actions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        _actions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; actions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DoStuff&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CancellationToken&lt;/span&gt; ct&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WhenAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_actions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;action &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;DoStuff&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ct&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gives us more flexibility, and we can make decisions about how the actions are to be performed (in sequence or in parallel) &lt;em&gt;without changing the consuming class&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Collecting results into a list&lt;/h3&gt;
&lt;p&gt;This situation might arise if you have a range of ‘samplers’ that you want to run on some object. Perhaps you want to read several different indicators of “health” from a computer—performance counters, IO stats, memory usage and so on—and then collect these all these results into a list to store for later retrieval.&lt;/p&gt;
&lt;p&gt;Each individual collector would be a separate class, so that you can develop &amp;#x26; test them in isolation.&lt;/p&gt;
&lt;p&gt;The initial setup should be familiar by now. We have an interface &lt;code class=&quot;language-text&quot;&gt;ICollectInformation&lt;/code&gt; and a consumer class:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Datum&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; Key &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; Value &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ICollectInformation&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token return-type class-name&quot;&gt;Datum&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CollectInformation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CollectsInformation&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ICollection&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ICollectInformation&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; _collecters&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DoCollection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;List&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Datum&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; collector &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; _collecters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;collector&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CollectInformation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;token comment&quot;&gt;// do something with data&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, we want to be able to create an instance which will collect items into a list for us. However, we can’t return a list from &lt;code class=&quot;language-text&quot;&gt;ICollectInformation&lt;/code&gt;—it can only return a single &lt;code class=&quot;language-text&quot;&gt;Datum&lt;/code&gt;. So, let’s alter this interface (it’s our code, after all), and change it to return any number of items:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ICollectInformation&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token return-type class-name&quot;&gt;IEnumerable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Datum&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CollectInformation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can write the implementation of &lt;code class=&quot;language-text&quot;&gt;ICollectInformation&lt;/code&gt; that we want:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AggregateCollector&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;ICollectInformation&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;NotNull&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IReadOnlyCollection&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ICollectInformation&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; _collectors&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AggregateCollector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IEnumerable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ICollectInformation&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; collectors&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        _collectors &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; collectors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;IEnumerable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Datum&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CollectInformation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; collector &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; _collectors
           &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; datum &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; collector&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CollectInformation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; datum&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And our consumer class again only has to deal with a single instance:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CollectsInformationRevised&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ICollectInformation&lt;/span&gt; _collecter&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; _collecter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CollectInformation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;token comment&quot;&gt;// do something with data&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once again, complexity averted!&lt;/p&gt;
&lt;h2&gt;The general case&lt;/h2&gt;
&lt;p&gt;So, what’s the magic ingredient here that allows us to combine these types of strategies? The key is that the result type of each can be treated as a &lt;em&gt;monoid&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A type is a &lt;strong&gt;monoid&lt;/strong&gt; (or is &lt;strong&gt;monoidal&lt;/strong&gt;), if it satisfies three conditions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1. You can combine two (or more) instances of it to form something that has the same type. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This allows us to “squash” multiple return values together, so we can reduce many strategies to one strategy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2. The combining function (call it &lt;code class=&quot;language-text&quot;&gt;#&lt;/code&gt;) must be associative so that it doesn’t matter “which way” you group the instances when combining—&lt;code class=&quot;language-text&quot;&gt;x # (y # z)&lt;/code&gt; should be the same as &lt;code class=&quot;language-text&quot;&gt;(x # y) # z&lt;/code&gt;. (But order can matter, &lt;code class=&quot;language-text&quot;&gt;x # y&lt;/code&gt; doesn’t have to be the same as &lt;code class=&quot;language-text&quot;&gt;y # x&lt;/code&gt;.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Although it wasn’t used above, this means we can nest strategies arbitrarily using our combiners, and it won’t affect the result.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3. There is an instance (called the “identity”) that can be combined with any other instance without changing the result. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is important as it allows us to produce a result in the case that we have zero strategies, and gives us sane results in other cases.&lt;/p&gt;
&lt;p&gt;Here’s how the previous examples match up to the monoid concept:&lt;/p&gt;
&lt;p&gt;In the first example (combining policies), we were (1.) combining multiple booleans using &lt;code class=&quot;language-text&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; under the covers to get back another boolean. For condition (2.), it doesn’t matter if you write &lt;code class=&quot;language-text&quot;&gt;a &amp;amp;&amp;amp; (b &amp;amp;&amp;amp; c)&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;(a &amp;amp;&amp;amp; b) &amp;amp;&amp;amp; c&lt;/code&gt;, as it will give you the same answer, and (3.) if you combine &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; with any boolean using &lt;code class=&quot;language-text&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;, you get back the original boolean, so &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; is the identity for &lt;code class=&quot;language-text&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For the second example (combining actions) we were essentially using &lt;code class=&quot;language-text&quot;&gt;void&lt;/code&gt; as a monoidal type. It’s not very interesting since combining two &lt;code class=&quot;language-text&quot;&gt;void&lt;/code&gt;s (via sequencing) just gives you another &lt;code class=&quot;language-text&quot;&gt;void&lt;/code&gt;—so the third condition is trivially satisfied.&lt;/p&gt;
&lt;p&gt;For the third example (combining samplers), we were using &lt;code class=&quot;language-text&quot;&gt;IEnumerable&lt;/code&gt;. In this case, the combining operation is concatenation, and the identity is the empty enumerable. Since a monoid combining operation must produce something of the same type as its inputs, and we can’t combine two &lt;code class=&quot;language-text&quot;&gt;Datum&lt;/code&gt;s to make another &lt;code class=&quot;language-text&quot;&gt;Datum&lt;/code&gt;, we had to change the result type of the &lt;code class=&quot;language-text&quot;&gt;ICollectInformation&lt;/code&gt; interface to return an enumerable before we could create the combining class.&lt;/p&gt;
&lt;p&gt;I tried to pick three monoids that are useful for dealing with strategies here. Numbers can also be monoids (&lt;a href=&quot;https://en.wikipedia.org/wiki/Monoid#Examples&quot;&gt;the sum or product monoids, or max or min monoids&lt;/a&gt;), but I don’t think they’re as useful in this particular situation.&lt;/p&gt;
&lt;p&gt;So, to summarize: Once you have discovered that the result type of a strategy can be treated as a monoid, then you can apply the above techniques to result in simpler, cleaner code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Identify what the combining operation for a particular strategy type is.&lt;/li&gt;
&lt;li&gt;Extract a class that performs that operation (and is an instance of the same interface).&lt;/li&gt;
&lt;li&gt;Remove the complexities of the combining operation from the consuming classes, so that they only need to consider a single instance.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Extra: Making combining more palatable (C#-specific)&lt;/h4&gt;
&lt;p&gt;If possible, you could also switch out the interface for an abstract base class. This allows us to define operators on the class, so we can easily combine multiple instances without having to use the ‘combiner’ type explicitly. Indeed, we can hide the combiner type internally:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PolicyType&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ShouldPerformAction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; PolicyType &lt;span class=&quot;token keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PolicyType&lt;/span&gt; first&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PolicyType&lt;/span&gt; second&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;CombinedPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;first&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; second&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;// this could be much cleaner if C# ever gets F#-style object expressions:&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// https://github.com/dotnet/roslyn/issues/13#issuecomment-195161037&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CombinedPolicy&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;PolicyType&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PolicyType&lt;/span&gt; _first&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PolicyType&lt;/span&gt; _second&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CombinedPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PolicyType&lt;/span&gt; first&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PolicyType&lt;/span&gt; second&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            _first &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; first&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            _second &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; second&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ShouldPerformAction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; _first&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldPerformAction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; _second&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldPerformAction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we can simply combine policies via &lt;code class=&quot;language-text&quot;&gt;p1 &amp;amp; p2&lt;/code&gt;. Note that this relies on the associativity of the monoid to work well!&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;A final note&lt;/h4&gt;
&lt;p&gt;The deeper reason that this all works is not only that the &lt;em&gt;result&lt;/em&gt; type is monoidal, but that &lt;code class=&quot;language-text&quot;&gt;Func&amp;lt;TArg, TResult&amp;gt;&lt;/code&gt; is &lt;em&gt;itself&lt;/em&gt; a monoid, if its result is a monoidal type. This allows us to combine multiple instances of &lt;code class=&quot;language-text&quot;&gt;Func&amp;lt;TArg, TResult&amp;gt;&lt;/code&gt;. See if you can figure out what the combining function is for it! I’ll also explore this more in a future post.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Ignore Null Strategies]]></title><description><![CDATA[There’s no such thing as a null strategy! Here is a simple refactoring/micro-pattern that can help remove a little complexity from classes…]]></description><link>https://porg.es/ignore-null-strategies/</link><guid isPermaLink="false">https://porg.es/ignore-null-strategies/</guid><pubDate>Sun, 02 Jan 2000 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;There’s no such thing as a null strategy!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is a simple refactoring/micro-pattern that can help remove a little complexity from classes that use passed-in behaviours/strategies/handlers/whatever you want to call them. &lt;sup id=&quot;fnref-n&quot;&gt;&lt;a href=&quot;#fn-n&quot; class=&quot;footnote-ref&quot;&gt;n&lt;/a&gt;&lt;/sup&gt;
The examples given here may seem rather abstract or “enterprisey”, but it’s something that comes up repeatedly when developing software.&lt;/p&gt;
&lt;h3&gt;The problem: Checking strategies for nullness&lt;/h3&gt;
&lt;p&gt;Below is a very simplified example of a consumer (the class &lt;code class=&quot;language-text&quot;&gt;ProducerExample&lt;/code&gt;) of the &lt;code class=&quot;language-text&quot;&gt;IProducer&lt;/code&gt; strategy. The consumer explicitly checks if the strategy is null before invoking it, and if it &lt;em&gt;is&lt;/em&gt; null, it produces some default value instead.&lt;/p&gt;
&lt;p&gt;This extra null check gets in the way of what the class is actually doing and introduces an extra code path that is not wanted (or needed).&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/Porges/0a079f80ec0b90c4aff9b23ddc3b89c8.js?file=0-producer.cs&quot;&gt;&lt;/script&gt;
&lt;p&gt;(The producer here is deliberately simple—in a real codebase this could take any number of arguments.)&lt;/p&gt;
&lt;p&gt;One situation where this kind of code might appear is when a previously-untested class is being tested for the first time. In this case, dummy values might be inserted in order that &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt; can be passed as the strategy at test time and you’ll still get results instead of a &lt;code class=&quot;language-text&quot;&gt;NullReferenceException&lt;/code&gt;. This kind of setup is dangerous, as inadvertently passing &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt; in the production code will end up generating these dummy values! 💥&lt;/p&gt;
&lt;p&gt;Here’s a very similar example, using a strategy that doesn’t have a result (which I’ll call a “handler”). This is checked for nullness before it is invoked for its side-effects:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/Porges/0a079f80ec0b90c4aff9b23ddc3b89c8.js?file=1-handler.cs&quot;&gt;&lt;/script&gt;
&lt;h3&gt;Solution: Don’t check strategies for nullness!&lt;/h3&gt;
&lt;p&gt;Instead of explicitly checking for nullness, assume that the strategy is not null (you can enforce this in the constructor) and migrate any “default action” into a new implementation of the strategy.&lt;/p&gt;
&lt;p&gt;Then, anywhere you were previously passing in &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt;, you can instead pass an instance of your shiny new implementation.&lt;/p&gt;
&lt;p&gt;For the producer example, we can move the default implementation into a new class, and remove the null check:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/Porges/0a079f80ec0b90c4aff9b23ddc3b89c8.js?file=2-producer2.cs&quot;&gt;&lt;/script&gt;
&lt;p&gt;(The &lt;code class=&quot;language-text&quot;&gt;[NotNull]&lt;/code&gt; annotation here is something supported by Resharper via the &lt;a href=&quot;https://www.nuget.org/packages/JetBrains.Annotations&quot;&gt;Resharper.Annotations&lt;/a&gt; package.)&lt;/p&gt;
&lt;p&gt;If we need to change the result of the producer depending on what the consumer is, we can use a variation on this, and create an implementation that stores any value we want:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/Porges/0a079f80ec0b90c4aff9b23ddc3b89c8.js?file=3-producer2-2.cs&quot;&gt;&lt;/script&gt;
&lt;p&gt;In the “handler” case, we can create a &lt;a href=&quot;https://en.wikipedia.org/wiki/Null_Object_pattern&quot;&gt;‘null object’ implementation&lt;/a&gt; that does nothing, since we don’t need to produce a result:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/Porges/0a079f80ec0b90c4aff9b23ddc3b89c8.js?file=4-handler2.cs&quot;&gt;&lt;/script&gt;
&lt;p&gt;With the refactored code, the consuming classes are cleaner (less code, lower cyclomatic complexity), and we have extracted a “default” implementation, which could potentially be used by other consumers.&lt;/p&gt;
&lt;p&gt;At the same time, we have created some useful additional implementations that we can use in unit tests! The “Default” or “Constant” producers are useful when providing canned data to classes that are being tested, and “Null” handlers are useful when ignoring part of the behaviour of a class in order to test other parts.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Variation: Function-oriented implementation&lt;/h4&gt;
&lt;p&gt;For single-method interfaces such as those above we can replace them with delegates. This can lead to much cleaner code.&lt;/p&gt;
&lt;p&gt;For producers:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/Porges/0a079f80ec0b90c4aff9b23ddc3b89c8.js?file=5-producer-functional.cs&quot;&gt;&lt;/script&gt;
&lt;p&gt;And for handlers:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/Porges/0a079f80ec0b90c4aff9b23ddc3b89c8.js?file=6-handler-functional.cs&quot;&gt;&lt;/script&gt;
&lt;p&gt;I have yet to explore this style in-depth myself, but it seems promising. (I would avoid using pure &lt;code class=&quot;language-text&quot;&gt;Func&amp;lt;T, ...&amp;gt;&lt;/code&gt; as it doesn’t give any indication of what the intention of the code is.)&lt;/p&gt;
&lt;p&gt;The nice thing about delegates is that they will implicitly convert any compatible lambda; so if you need a one-off implementation in test code, you can write it directly in your test method, and not have to create an entirely new class.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-n&quot;&gt;
&lt;p&gt;Here I’m going to use strategy in a broad sense, to basically include any behaviour that is injected into a class. Other people might call these collaborators (although I’d apply that to the implementations of the strategy and not the strategy abstraction itself), or something different.&lt;/p&gt;
&lt;a href=&quot;#fnref-n&quot; class=&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Johannes]]></title><description><![CDATA[johannes dud nit know many people- he did not even own msny peooplexand as duch hexwaeza dailue anx a  brigand and a foe. hw ws somefhing to…]]></description><link>https://porg.es/johannes/</link><guid isPermaLink="false">https://porg.es/johannes/</guid><pubDate>Sat, 01 Jan 2000 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;johannes&lt;/strong&gt; dud nit know many people- he did not even own msny peooplexand as duch hexwaeza dailue anx a  brigand and a foe. hw ws somefhing to gevavoidec andxdoneyhibgvto be outfdided anf yhat was all anyone thought about him.&lt;/p&gt;
&lt;p&gt;this wascif course (this veing a syorycabout a man a person ) no grwar deal to johnaes himself. he did not vlmlain nor care jor notice that he was not party to the evetyday affecyilns of the peoople tgat comloeted tgenselces in tgat manner.&lt;/p&gt;
&lt;p&gt;butvof coursevthid is both an alegkrgy and a lie thosecwho writwcabout tgensrlvesxwritecabout abotger andcthosevtgat writd about another writexamongst themselves. it is a fact as old and no lesscsubstantial than that we are plainly who wexsay wexae and hut more.&lt;/p&gt;
&lt;p&gt;johannsx tgen musg be a figuee a archetype a rival axsaint anfld ninevif tgese moresobthan mysrlf for it is in writing what wecwish to writecabouf in ehichunwritten is that which wevtruly wish to writecahout and that which wd ourselves rrmain unwritten.&lt;/p&gt;
&lt;p&gt;thid of coyrsexis billshit. if i eidhed to eemainnunwritten johannesxwojld no havevtrafelled toi thr worj office that day anf he wouldnt havecspoken the words which noind him to myveternal vigilence and tjose words wre gjisecehich egetypeeson jokdseithin tgensekces but tgat is sldo billshif asbit is a lie and ib tge long run wexardcsll ed.
ihbthevlojgruncwexatr al dead of coure bug sctibg as if not id wyite enlightening didgeatdning disheartenjng and yet somehow still remains praiseworthy despite pullibg down the general presentationnof our speciesshit&lt;/p&gt;
&lt;p&gt;meanwhole johannes gas splainefimsrlf .hello he has said hello mu namevis johannes &amp;#x26; who mighg you be &amp;#x26; i am a man who has grown &amp;#x26; yet is not usegulthere are obly so mang places
a man likd (johannes) can bevplaced&lt;/p&gt;
&lt;p&gt;you know?&lt;/p&gt;
&lt;p&gt;yes and it is truevi have not ben placed&lt;/p&gt;
&lt;p&gt;wl?&lt;/p&gt;
&lt;p&gt;at all inbthrvpast&lt;/p&gt;
&lt;p&gt;$4 4ll?&lt;/p&gt;
&lt;p&gt;yes&lt;/p&gt;
&lt;p&gt;we have notcseen such negligence in a longvtime&lt;/p&gt;
&lt;p&gt;are you crippled orcwith vhold&lt;/p&gt;
&lt;p&gt;nobsaid hohannes i am a mman&lt;/p&gt;
&lt;p&gt;at this point johanned was already but he said lityle didvhe knowcwhag hexwas sayibgbi would like a job &lt;/p&gt;
&lt;p&gt;and thiz was domdthibg he had hward of and alsi that hecwoukd kikevto be a man brfaysevthat was aoso sonrthkng he has heard of.&lt;/p&gt;
&lt;p&gt;he was offered a role &amp;#x26; he took it.&lt;/p&gt;
&lt;p&gt;josbnes neitger there was an everyman buyt he could not be more awhen he became.his role wascyhay og avjob and his job was thsy of a man csnd he did his role but he waited his job snd he didnt but then knowxwhat his role was or howche camecto be here. but he of his role knew nothing andvof his kob his role.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Johannes&lt;/strong&gt; did not know many people - he did not even own many people and as such he was a failure and a brigand and a foe. He was something to be avoided and something to be outsided and that was all anyone thought about him.&lt;/p&gt;
&lt;p&gt;This was of course (this being a story about a man a person) no great deal to Johannes himself. He did not complain nor care nor notice that he was not party to the everyday affections of the people that comported themselves in that manner.&lt;/p&gt;
&lt;p&gt;But of course this is both an allegory and a lie those who write about themselves write about another and those who wrote about another write amongst themselves. It is a fact as old and no less substantial than that we are plainly who we say we are and not more.&lt;/p&gt;
&lt;p&gt;(Johannes then must be a figure a archetype a rival against and even if these more so than myself for it is in writing what we wish to write about in which unwritten is that which we truly wish to write about and that which we ourselves remain unwritten)&lt;/p&gt;
&lt;p&gt;This of course is bullshit. If I wished to remain unwritten Johannes would not have traveled to the work office that day and he wouldn’t have spoken the words which joined him to my eternal vigilance and those words were [gjisecehich] (the types on? [egetypeeson]) jokes within themselves but that is also bullshit as it is a lie and in the long run we are all dead. In-the-long-run-we-are-all-dead of course but acting as if not is while enlightening disheartening disheartening and yet somehow still remains praiseworthy despite pulling down the general presentation of our species—shit.&lt;/p&gt;
&lt;p&gt;Meanwhile Johannes has explained himself. Hello he has said hello my name is Johannes &amp;#x26; who might you be &amp;#x26; I am a man who has grown &amp;#x26; yet is not useful.&lt;/p&gt;
&lt;p&gt;There are only so many places a man like (Johannes) can be placed you know?&lt;/p&gt;
&lt;p&gt;Yes and it is true I have not been placed&lt;/p&gt;
&lt;p&gt;Well?&lt;/p&gt;
&lt;p&gt;At all in the past&lt;/p&gt;
&lt;p&gt;At all?&lt;/p&gt;
&lt;p&gt;Yes&lt;/p&gt;
&lt;p&gt;We have not seen such negligence in a long time&lt;br/&gt;
are you crippled or with child&lt;/p&gt;
&lt;p&gt;No said Johannes I am a man&lt;/p&gt;
&lt;p&gt;At this point Johannes was already but he said little did he know what he was saying would like a job
and this was something he had heard of and also that he would like to be a man because that was also something he has heard of.&lt;/p&gt;
&lt;p&gt;He was offered a role &amp;#x26; he took it.&lt;/p&gt;
&lt;p&gt;Johannes neither there was an everyman but he could not be more when he became.&lt;/p&gt;
&lt;p&gt;His role was that of a job and his job was that of a man and he did his role but he waited his job and he didn’t but then know what his role was or how he came to be here. But he of his role knew nothing and of his job his role.&lt;/p&gt;</content:encoded></item></channel></rss>